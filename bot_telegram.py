import sqlite3 as sq
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import Dispatcher
import os
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove
from aiogram import Bot
import sqlite_db
from sqlite_db import sql_start
from create_bot import dp,bot 



	
storage=MemoryStorage()


async def on_startup(_):
	sqlite_db.sql_start()

#–ö–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω–∞
button_load = KeyboardButton('/‚úÖ–ó–∞–≤–∞–Ω—Ç–∞–∂-–û–≤–æ—á–µ–≤–∏–π')
button_load1 = KeyboardButton('/‚úÖ–ó–∞–≤–∞–Ω—Ç–∞–∂-–§—Ä—É–∫—Ç–æ–≤–∏–π')
button_load2 = KeyboardButton('/‚úÖ–ó–∞–≤–∞–Ω—Ç–∞–∂-–ö–æ–≤–±–∞—Å–Ω–∏–π')
button_load3 = KeyboardButton('/‚úÖ–ó–∞–≤–∞–Ω—Ç–∞–∂-–°–æ–ª–æ–¥–∫–∏–π')
button_load4 = KeyboardButton('/‚úÖ–ó–∞–≤–∞–Ω—Ç–∞–∂-–ì–æ—Ä—ñ—Ö–æ–≤–∏–π')
button_load5 = KeyboardButton('/‚úÖ–ó–∞–≤–∞–Ω—Ç–∞–∂-–ï–∫–æ-—Ç–æ—Ä–±–∏–Ω–∫–∏')
button_load6 = KeyboardButton('/‚úÖ–ó–∞–≤–∞–Ω—Ç–∞–∂-–°—É—Ö–æ–±–∞—Ä–≤–Ω–∏–π')
button_load7 = KeyboardButton('/‚úÖ–ê–≤–∞—Ç–∞—Ä–∫–∞')
button_delete = KeyboardButton('/üö´–í–∏–¥–∞–ª–∏—Ç–∏-–û–≤–æ—á–µ–≤–∏–π')
button_delete1 = KeyboardButton('/üö´–í–∏–¥–∞–ª–∏—Ç–∏-–§—Ä—É–∫—Ç–æ–≤–∏–π')
button_delete2 = KeyboardButton('/üö´–í–∏–¥–∞–ª–∏—Ç–∏-–ö–æ–≤–±–∞—Å–Ω–∏–π')
button_delete3 = KeyboardButton('/üö´–í–∏–¥–∞–ª–∏—Ç–∏-–°–æ–ª–æ–¥–∫–∏–π')
button_delete4 = KeyboardButton('/üö´–í–∏–¥–∞–ª–∏—Ç–∏-–ì–æ—Ä—ñ—Ö–æ–≤–∏–π')
button_delete5 = KeyboardButton('/üö´–í–∏–¥–∞–ª–∏—Ç–∏-–ï–∫–æ-—Ç–æ—Ä–±–∏–Ω–∫–∏')
button_delete6 = KeyboardButton('/üö´–í–∏–¥–∞–ª–∏—Ç–∏-–°—É—Ö–æ–±–∞—Ä–≤–Ω–∏–π')
button_delete7 = KeyboardButton('/üö´–í–∏–¥–∞–ª–∏—Ç–∏-–ê–≤–∞—Ç–∞—Ä–∫—É')

button_case_admin = ReplyKeyboardMarkup(resize_keyboard=True)
button_case_admin.row(button_load,button_delete).row(button_load1,button_delete1).row(button_load2,button_delete2).row(button_load3,button_delete3).row(button_load4,button_delete4).row(button_load5,button_delete5).row(button_load6,button_delete6).row(button_load7,button_delete7)

ID = None

class FSMAdmin(StatesGroup):
	photo = State()
	name = State()
	description = State()
	price = State()
class FSMAdmin1(StatesGroup):
	photo = State()
	name = State()
	description = State()
	price = State()
class FSMAdmin2(StatesGroup):
	photo = State()
	name = State()
	description = State()
	price = State()
class FSMAdmin3(StatesGroup):
	photo = State()
	name = State()
	description = State()
	price = State()
class FSMAdmin4(StatesGroup):
	photo = State()
	name = State()
	description = State()
	price = State()
class FSMAdmin5(StatesGroup):
	photo = State()
	name = State()
	description = State()
	price = State()
class FSMAdmin6(StatesGroup):
	photo = State()
	name = State()
	description = State()
	price = State()
class FSMAdmin7(StatesGroup):
	photo = State()
	name = State()

#–ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
@dp.message_handler(commands=['moderator'], is_chat_admin=True)
async def make_change_command(message: types.Message):
	global ID 
	ID = message.from_user.id
	await bot.send_message(message.from_user.id, '–ß—Ç–æ —Ö–æ–∑—è–π–∫–∞ –Ω–∞–¥–æ‚Åâ', reply_markup=button_case_admin)
	await message.delete()

                          #–ù–ê–ß–ê–õ–û –¥–∏–∞–ª–æ–≥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –ú–ï–ù–Æ!
@dp.message_handler(commands='‚úÖ–ó–∞–≤–∞–Ω—Ç–∞–∂-–û–≤–æ—á–µ–≤–∏–π',state=None)
async def cm_start(message : types.Message):
	if message.from_user.id == ID:
		await FSMAdmin.photo.set()
		await message.reply('–ó–∞–≤–∞–Ω—Ç–∞–∂ —Ñ–æ—Ç–æ –æ–≤–æ—á–µ–≤–æ–≥–æ')
#1
@dp.message_handler(commands='‚úÖ–ó–∞–≤–∞–Ω—Ç–∞–∂-–§—Ä—É–∫—Ç–æ–≤–∏–π',state=None)
async def cm_start(message : types.Message):
	if message.from_user.id == ID:
		await FSMAdmin1.photo.set()
		await message.reply('–ó–∞–≤–∞–Ω—Ç–∞–∂ —Ñ–æ—Ç–æ —Ñ—Ä—É–∫—Ç–æ–≤–æ–≥–æ')
#2	
@dp.message_handler(commands='‚úÖ–ó–∞–≤–∞–Ω—Ç–∞–∂-–ö–æ–≤–±–∞—Å–Ω–∏–π',state=None)
async def cm_start(message : types.Message):
	if message.from_user.id == ID:
		await FSMAdmin2.photo.set()
		await message.reply('–ó–∞–≤–∞–Ω—Ç–∞–∂ —Ñ–æ—Ç–æ –∫–æ–≤–±–∞—Å–Ω–æ–≥–æ')
#3
@dp.message_handler(commands='‚úÖ–ó–∞–≤–∞–Ω—Ç–∞–∂-–°–æ–ª–æ–¥–∫–∏–π',state=None)
async def cm_start(message : types.Message):
	if message.from_user.id == ID:
		await FSMAdmin3.photo.set()
		await message.reply('–ó–∞–≤–∞–Ω—Ç–∞–∂ —Ñ–æ—Ç–æ —Å–æ–ª–æ–¥–∫–æ–≥–æ')
#4
@dp.message_handler(commands='‚úÖ–ó–∞–≤–∞–Ω—Ç–∞–∂-–ì–æ—Ä—ñ—Ö–æ–≤–∏–π',state=None)
async def cm_start(message : types.Message):
	if message.from_user.id == ID:
		await FSMAdmin4.photo.set()
		await message.reply('–ó–∞–≤–∞–Ω—Ç–∞–∂ —Ñ–æ—Ç–æ –≥–æ—Ä—ñ—Ö–æ–≤–æ–≥–æ')
#5		
@dp.message_handler(commands='‚úÖ–ó–∞–≤–∞–Ω—Ç–∞–∂-–ï–∫–æ-—Ç–æ—Ä–±–∏–Ω–∫–∏',state=None)
async def cm_start(message : types.Message):
	if message.from_user.id == ID:
		await FSMAdmin5.photo.set()
		await message.reply('–ó–∞–≤–∞–Ω—Ç–∞–∂ —Ñ–æ—Ç–æ –ï–∫–æ-—Ç–æ—Ä–±–∏–Ω–∫–∏')
#6
@dp.message_handler(commands='‚úÖ–ó–∞–≤–∞–Ω—Ç–∞–∂-–°—É—Ö–æ–±–∞—Ä–≤–Ω–∏–π',state=None)
async def cm_start(message : types.Message):
	if message.from_user.id == ID:
		await FSMAdmin6.photo.set()
		await message.reply('–ó–∞–≤–∞–Ω—Ç–∞–∂ —Ñ–æ—Ç–æ —Å—É—Ö–æ–±–∞—Ä–≤–Ω–æ–≥–æ')
#7
@dp.message_handler(commands='‚úÖ–ê–≤–∞—Ç–∞—Ä–∫–∞',state=None)
async def cm_start(message : types.Message):
	if message.from_user.id == ID:
		await FSMAdmin7.photo.set()
		await message.reply('–ó–∞–≤–∞–Ω—Ç–∞–∂ –ê–≤–∞—Ç–∞—Ä–∫—É')
	

                       #–õ–æ–≤–∏–º  –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –∏ –ø–∏—à–µ–º —Å–ª–æ–≤–∞—Ä—å –ù–ê–ó–í–ê–ù–ò–ï!
@dp.message_handler(content_types=['photo'], state=FSMAdmin.photo)
async def load_photo(message: types.Message, state: FSMContext):
	if message.from_user.id == ID:
		async with state.proxy() as data:
			data['photo'] = message.photo[0].file_id
		await FSMAdmin.next()
		await message.reply("–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –Ω–∞–∑–≤—É")
#1
@dp.message_handler(content_types=['photo'], state=FSMAdmin1.photo)
async def load_photo(message: types.Message, state: FSMContext):
	if message.from_user.id == ID:
		async with state.proxy() as data:
			data['photo'] = message.photo[0].file_id
		await FSMAdmin1.next()
		await message.reply("–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –Ω–∞–∑–≤—É")
#2
@dp.message_handler(content_types=['photo'], state=FSMAdmin2.photo)
async def load_photo(message: types.Message, state: FSMContext):
	if message.from_user.id == ID:
		async with state.proxy() as data:
			data['photo'] = message.photo[0].file_id
		await FSMAdmin2.next()
		await message.reply("–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –Ω–∞–∑–≤—É")
#3
@dp.message_handler(content_types=['photo'], state=FSMAdmin3.photo)
async def load_photo(message: types.Message, state: FSMContext):
	if message.from_user.id == ID:
		async with state.proxy() as data:
			data['photo'] = message.photo[0].file_id
		await FSMAdmin3.next()
		await message.reply("–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –Ω–∞–∑–≤—É")
#4
@dp.message_handler(content_types=['photo'], state=FSMAdmin4.photo)
async def load_photo(message: types.Message, state: FSMContext):
	if message.from_user.id == ID:
		async with state.proxy() as data:
			data['photo'] = message.photo[0].file_id
		await FSMAdmin4.next()
		await message.reply("–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –Ω–∞–∑–≤—É")
#5
@dp.message_handler(content_types=['photo'], state=FSMAdmin5.photo)
async def load_photo(message: types.Message, state: FSMContext):
	if message.from_user.id == ID:
		async with state.proxy() as data:
			data['photo'] = message.photo[0].file_id
		await FSMAdmin5.next()
		await message.reply("–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –Ω–∞–∑–≤—É")
#6
@dp.message_handler(content_types=['photo'], state=FSMAdmin6.photo)
async def load_photo(message: types.Message, state: FSMContext):
	if message.from_user.id == ID:
		async with state.proxy() as data:
			data['photo'] = message.photo[0].file_id
		await FSMAdmin6.next()
		await message.reply("–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –Ω–∞–∑–≤—É")
#7
@dp.message_handler(content_types=['photo'], state=FSMAdmin7.photo)
async def load_photo(message: types.Message, state: FSMContext):
	if message.from_user.id == ID:
		async with state.proxy() as data:
			data['photo'] = message.photo[0].file_id
		await FSMAdmin7.next()
		await message.reply("–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –Ω–∞–∑–≤—É")

                               #–õ–æ–≤–∏–º –≤—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç –û–ü–ò–°–ê–ù–ò–ï!
@dp.message_handler(state=FSMAdmin.name)
async def load_name(message: types.Message, state: FSMContext):
	if message.from_user.id == ID:
		async with state.proxy() as data:
			data['name'] = message.text
		await FSMAdmin.next()	
		await message.reply("–í–≤–µ–¥–∏ –æ–ø–∏—Å –±—É–∫–µ—Ç—É")
#1
@dp.message_handler(state=FSMAdmin1.name)
async def load_name(message: types.Message, state: FSMContext):
	if message.from_user.id == ID:
		async with state.proxy() as data:
			data['name'] = message.text
		await FSMAdmin1.next()	
		await message.reply("–í–≤–µ–¥–∏ –æ–ø–∏—Å –±—É–∫–µ—Ç—É")
#2
@dp.message_handler(state=FSMAdmin2.name)
async def load_name(message: types.Message, state: FSMContext):
	if message.from_user.id == ID:
		async with state.proxy() as data:
			data['name'] = message.text
		await FSMAdmin2.next()	
		await message.reply("–í–≤–µ–¥–∏ –æ–ø–∏—Å –±—É–∫–µ—Ç—É")
#3
@dp.message_handler(state=FSMAdmin3.name)
async def load_name(message: types.Message, state: FSMContext):
	if message.from_user.id == ID:
		async with state.proxy() as data:
			data['name'] = message.text
		await FSMAdmin3.next()	
		await message.reply("–í–≤–µ–¥–∏ –æ–ø–∏—Å –±—É–∫–µ—Ç—É")
#4
@dp.message_handler(state=FSMAdmin4.name)
async def load_name(message: types.Message, state: FSMContext):
	if message.from_user.id == ID:
		async with state.proxy() as data:
			data['name'] = message.text
		await FSMAdmin4.next()	
		await message.reply("–í–≤–µ–¥–∏ –æ–ø–∏—Å –±—É–∫–µ—Ç—É")
#5
@dp.message_handler(state=FSMAdmin5.name)
async def load_name(message: types.Message, state: FSMContext):
	if message.from_user.id == ID:
		async with state.proxy() as data:
			data['name'] = message.text
		await FSMAdmin5.next()	
		await message.reply("–í–≤–µ–¥–∏ –æ–ø–∏—Å —Ç–æ—Ä–±–∏–Ω–∫–∏")
#6
@dp.message_handler(state=FSMAdmin6.name)
async def load_name(message: types.Message, state: FSMContext):
	if message.from_user.id == ID:
		async with state.proxy() as data:
			data['name'] = message.text
		await FSMAdmin6.next()	
		await message.reply("–í–≤–µ–¥–∏ –æ–ø–∏—Å –±—É–∫–µ—Ç—É")
#7
@dp.message_handler(state=FSMAdmin7.name)
async def load_name(message: types.Message, state: FSMContext):
	if message.from_user.id == ID:
		async with state.proxy() as data:
			data['name'] = message.text
		await sqlite_db.sql_add_command7(state)
		await state.finish()

									#–õ–æ–≤–∏—Ç —Ç—Ä–µ—Ç–∏–π –æ—Ç–≤–µ—Ç –¶–ï–ù–ê!!!!

@dp.message_handler(state=FSMAdmin.description)
async def load_description(message: types.Message, state: FSMContext):
	if message.from_user.id == ID:
		async with state.proxy() as data:
			data['description'] = message.text
		await FSMAdmin.next()
		await message.reply("–¢–µ–ø–µ—Ä –≤–∫–∞–∂–∏ —Ü—ñ–Ω—É")
#1
@dp.message_handler(state=FSMAdmin1.description)
async def load_description(message: types.Message, state: FSMContext):
	if message.from_user.id == ID:
		async with state.proxy() as data:
			data['description'] = message.text
		await FSMAdmin1.next()
		await message.reply("–¢–µ–ø–µ—Ä –≤–∫–∞–∂–∏ —Ü—ñ–Ω—É")
#2
@dp.message_handler(state=FSMAdmin2.description)
async def load_description(message: types.Message, state: FSMContext):
	if message.from_user.id == ID:
		async with state.proxy() as data:
			data['description'] = message.text
		await FSMAdmin2.next()
		await message.reply("–¢–µ–ø–µ—Ä –≤–∫–∞–∂–∏ —Ü—ñ–Ω—É")
#3
@dp.message_handler(state=FSMAdmin3.description)
async def load_description(message: types.Message, state: FSMContext):
	if message.from_user.id == ID:
		async with state.proxy() as data:
			data['description'] = message.text
		await FSMAdmin3.next()
		await message.reply("–¢–µ–ø–µ—Ä –≤–∫–∞–∂–∏ —Ü—ñ–Ω—É")
#4
@dp.message_handler(state=FSMAdmin4.description)
async def load_description(message: types.Message, state: FSMContext):
	if message.from_user.id == ID:
		async with state.proxy() as data:
			data['description'] = message.text
		await FSMAdmin4.next()
		await message.reply("–¢–µ–ø–µ—Ä –≤–∫–∞–∂–∏ —Ü—ñ–Ω—É")
#5
@dp.message_handler(state=FSMAdmin5.description)
async def load_description(message: types.Message, state: FSMContext):
	if message.from_user.id == ID:
		async with state.proxy() as data:
			data['description'] = message.text
		await FSMAdmin5.next()
		await message.reply("–¢–µ–ø–µ—Ä –≤–∫–∞–∂–∏ —Ü—ñ–Ω—É")

#6
@dp.message_handler(state=FSMAdmin6.description)
async def load_description(message: types.Message, state: FSMContext):
	if message.from_user.id == ID:
		async with state.proxy() as data:
			data['description'] = message.text
		await FSMAdmin6.next()
		await message.reply("–¢–µ–ø–µ—Ä –≤–∫–∞–∂–∏ —Ü—ñ–Ω—É")

			# –õ–æ–≤–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–Ω—ã–µ –î–ê–ù–ù–´–ï!!!float()- —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
@dp.message_handler(state=FSMAdmin.price)
async def load_price(message: types.Message, state: FSMContext):
	if message.from_user.id == ID:
		async with state.proxy() as data:
			data['price'] = message.text

		await sqlite_db.sql_add_command(state)
		await state.finish()
#1
@dp.message_handler(state=FSMAdmin1.price)
async def load_price(message: types.Message, state: FSMContext):
	if message.from_user.id == ID:
		async with state.proxy() as data:
			data['price'] = message.text

		await sqlite_db.sql_add_command1(state)
		await state.finish()
#2
@dp.message_handler(state=FSMAdmin2.price)
async def load_price(message: types.Message, state: FSMContext):
	if message.from_user.id == ID:
		async with state.proxy() as data:
			data['price'] = message.text

		await sqlite_db.sql_add_command2(state)
		await state.finish()
#3
@dp.message_handler(state=FSMAdmin3.price)
async def load_price(message: types.Message, state: FSMContext):
	if message.from_user.id == ID:
		async with state.proxy() as data:
			data['price'] = message.text

		await sqlite_db.sql_add_command3(state)
		await state.finish()
#4
@dp.message_handler(state=FSMAdmin4.price)
async def load_price(message: types.Message, state: FSMContext):
	if message.from_user.id == ID:
		async with state.proxy() as data:
			data['price'] = message.text

		await sqlite_db.sql_add_command4(state)
		await state.finish()
#5
@dp.message_handler(state=FSMAdmin5.price)
async def load_price(message: types.Message, state: FSMContext):
	if message.from_user.id == ID:
		async with state.proxy() as data:
			data['price'] = message.text

		await sqlite_db.sql_add_command5(state)
		await state.finish()
#6
@dp.message_handler(state=FSMAdmin6.price)
async def load_price(message: types.Message, state: FSMContext):
	if message.from_user.id == ID:
		async with state.proxy() as data:
			data['price'] = message.text

		await sqlite_db.sql_add_command6(state)
		await state.finish()

		


						# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∏–∑ –±–∞–∑—ã –î–ê–ù–ù–´–•!!!!

@dp.callback_query_handler(lambda x: x.data and x.data.startswith('del '))
async def del_callback_run(callback_query: types.CallbackQuery):
	await sqlite_db.sql_delete_command(callback_query.data.replace('del ', ''))
	await callback_query.answer(text=f'{callback_query.data.replace("del ","")} –í–∏–¥–∞–ª–µ–Ω–æ‚ùó', show_alert=True)

@dp.message_handler(commands='üö´–í–∏–¥–∞–ª–∏—Ç–∏-–û–≤–æ—á–µ–≤–∏–π')
async def delete_item(message: types.Message):
	if message.from_user.id == ID:
		read = await sqlite_db.sql_delete()
		for ret in read:
			await bot.send_photo(message.from_user.id, ret[0], f'{ret[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {ret[2]}\n–¶–µ–Ω–∞ {ret[-1]}')
			await bot.send_message(message.from_user.id, text='üîºüîºüîº', reply_markup=InlineKeyboardMarkup().\
				add(InlineKeyboardButton(f'üö´–í–∏–¥–∞–ª–∏—Ç–∏-–û–≤–æ—á–µ–≤–∏–π {ret[1]}', callback_data=f'del {ret[1]}')))
#1
@dp.callback_query_handler(lambda x: x.data and x.data.startswith('del '))
async def del_callback_run(callback_query: types.CallbackQuery):
	await sqlite_db.sql_delete_command(callback_query.data.replace('del ', ''))
	await callback_query.answer(text=f'{callback_query.data.replace("del ","")} –í–∏–¥–∞–ª–µ–Ω–æ‚ùó', show_alert=True)

@dp.message_handler(commands='üö´–í–∏–¥–∞–ª–∏—Ç–∏-–§—Ä—É–∫—Ç–æ–≤–∏–π')
async def delete_item(message: types.Message):
	if message.from_user.id == ID:
		read = await sqlite_db.sql_delete1()
		for ret in read:
			await bot.send_photo(message.from_user.id, ret[0], f'{ret[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {ret[2]}\n–¶–µ–Ω–∞ {ret[-1]}')
			await bot.send_message(message.from_user.id, text='üîºüîºüîº', reply_markup=InlineKeyboardMarkup().\
				add(InlineKeyboardButton(f'üö´–í–∏–¥–∞–ª–∏—Ç–∏-–§—Ä—É–∫—Ç–æ–≤–∏–π {ret[1]}', callback_data=f'del {ret[1]}')))
#2
@dp.callback_query_handler(lambda x: x.data and x.data.startswith('del '))
async def del_callback_run(callback_query: types.CallbackQuery):
	await sqlite_db.sql_delete_command(callback_query.data.replace('del ', ''))
	await callback_query.answer(text=f'{callback_query.data.replace("del ","")} –í–∏–¥–∞–ª–µ–Ω–æ‚ùó', show_alert=True)

@dp.message_handler(commands='üö´–í–∏–¥–∞–ª–∏—Ç–∏-–ö–æ–≤–±–∞—Å–Ω–∏–π')
async def delete_item(message: types.Message):
	if message.from_user.id == ID:
		read = await sqlite_db.sql_delete2()
		for ret in read:
			await bot.send_photo(message.from_user.id, ret[0], f'{ret[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {ret[2]}\n–¶–µ–Ω–∞ {ret[-1]}')
			await bot.send_message(message.from_user.id, text='üîºüîºüîº', reply_markup=InlineKeyboardMarkup().\
				add(InlineKeyboardButton(f'üö´–í–∏–¥–∞–ª–∏—Ç–∏-–ö–æ–≤–±–∞—Å–Ω–∏–π {ret[1]}', callback_data=f'del {ret[1]}')))
#3
@dp.callback_query_handler(lambda x: x.data and x.data.startswith('del '))
async def del_callback_run(callback_query: types.CallbackQuery):
	await sqlite_db.sql_delete_command(callback_query.data.replace('del ', ''))
	await callback_query.answer(text=f'{callback_query.data.replace("del ","")} –í–∏–¥–∞–ª–µ–Ω–æ‚ùó', show_alert=True)

@dp.message_handler(commands='üö´–í–∏–¥–∞–ª–∏—Ç–∏-–°–æ–ª–æ–¥–∫–∏–π')
async def delete_item(message: types.Message):
	if message.from_user.id == ID:
		read = await sqlite_db.sql_delete3()
		for ret in read:
			await bot.send_photo(message.from_user.id, ret[0], f'{ret[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {ret[2]}\n–¶–µ–Ω–∞ {ret[-1]}')
			await bot.send_message(message.from_user.id, text='üîºüîºüîº', reply_markup=InlineKeyboardMarkup().\
				add(InlineKeyboardButton(f'üö´–í–∏–¥–∞–ª–∏—Ç–∏-–°–æ–ª–æ–¥–∫–∏–π {ret[1]}', callback_data=f'del {ret[1]}')))
#4
@dp.callback_query_handler(lambda x: x.data and x.data.startswith('del '))
async def del_callback_run(callback_query: types.CallbackQuery):
	await sqlite_db.sql_delete_command(callback_query.data.replace('del ', ''))
	await callback_query.answer(text=f'{callback_query.data.replace("del ","")} –í–∏–¥–∞–ª–µ–Ω–æ‚ùó', show_alert=True)

@dp.message_handler(commands='üö´–í–∏–¥–∞–ª–∏—Ç–∏-–ì–æ—Ä—ñ—Ö–æ–≤–∏–π')
async def delete_item(message: types.Message):
	if message.from_user.id == ID:
		read = await sqlite_db.sql_delete4()
		for ret in read:
			await bot.send_photo(message.from_user.id, ret[0], f'{ret[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {ret[2]}\n–¶–µ–Ω–∞ {ret[-1]}')
			await bot.send_message(message.from_user.id, text='üîºüîºüîº', reply_markup=InlineKeyboardMarkup().\
				add(InlineKeyboardButton(f'üö´–í–∏–¥–∞–ª–∏—Ç–∏-–ì–æ—Ä—ñ—Ö–æ–≤–∏–π {ret[1]}', callback_data=f'del {ret[1]}')))
#5
@dp.callback_query_handler(lambda x: x.data and x.data.startswith('del '))
async def del_callback_run(callback_query: types.CallbackQuery):
	await sqlite_db.sql_delete_command(callback_query.data.replace('del ', ''))
	await callback_query.answer(text=f'{callback_query.data.replace("del ","")} –í–∏–¥–∞–ª–µ–Ω–æ‚ùó', show_alert=True)

@dp.message_handler(commands='üö´–í–∏–¥–∞–ª–∏—Ç–∏-–ï–∫–æ-—Ç–æ—Ä–±–∏–Ω–∫–∏')
async def delete_item(message: types.Message):
	if message.from_user.id == ID:
		read = await sqlite_db.sql_delete5()
		for ret in read:
			await bot.send_photo(message.from_user.id, ret[0], f'{ret[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {ret[2]}\n–¶–µ–Ω–∞ {ret[-1]}')
			await bot.send_message(message.from_user.id, text='üîºüîºüîº', reply_markup=InlineKeyboardMarkup().\
add(InlineKeyboardButton(f'üö´–í–∏–¥–∞–ª–∏—Ç–∏-–ï–∫–æ-—Ç–æ—Ä–±–∏–Ω–∫–∏ {ret[1]}', callback_data=f'del {ret[1]}')))
#6
@dp.callback_query_handler(lambda x: x.data and x.data.startswith('del '))
async def del_callback_run(callback_query: types.CallbackQuery):
	await sqlite_db.sql_delete_command(callback_query.data.replace('del ', ''))
	await callback_query.answer(text=f'{callback_query.data.replace("del ","")} –í–∏–¥–∞–ª–µ–Ω–æ‚ùó', show_alert=True)

@dp.message_handler(commands='üö´–í–∏–¥–∞–ª–∏—Ç–∏-–°—É—Ö–æ–±–∞—Ä–≤–Ω–∏–π')
async def delete_item(message: types.Message):
	if message.from_user.id == ID:
		read = await sqlite_db.sql_delete6()
		for ret in read:
			await bot.send_photo(message.from_user.id, ret[0], f'{ret[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {ret[2]}\n–¶–µ–Ω–∞ {ret[-1]}')
			await bot.send_message(message.from_user.id, text='üîºüîºüîº', reply_markup=InlineKeyboardMarkup().\
add(InlineKeyboardButton(f'üö´–í–∏–¥–∞–ª–∏—Ç–∏-–°—É—Ö–æ–±–∞—Ä–≤–Ω–∏–π {ret[1]}', callback_data=f'del {ret[1]}')))
#7
@dp.callback_query_handler(lambda x: x.data and x.data.startswith('del'))
async def del_callback_run(callback_query: types.CallbackQuery):
	await sqlite_db.sql_delete_command(callback_query.data.replace('del'))
	await callback_query.answer(text=f'{callback_query.data.replace("del")} –í–∏–¥–∞–ª–µ–Ω–æ‚ùó', show_alert=True)

@dp.message_handler(commands='üö´–í–∏–¥–∞–ª–∏—Ç–∏-–ê–≤–∞—Ç–∞—Ä–∫—É')
async def delete_item(message: types.Message):
	if message.from_user.id == ID:
		read = await sqlite_db.sql_delete7()
		for ret in read:
			await bot.send_photo(message.from_user.id,ret[0])
			await bot.send_message(message.from_user.id, text='üîºüîºüîº',reply_markup=InlineKeyboardMarkup().\
add(InlineKeyboardButton(f'üö´–í–∏–¥–∞–ª–∏—Ç–∏-–ê–≤–∞—Ç–∞—Ä–∫—É {ret[1]}', callback_data=f'del {ret[1]}')))

b1 = KeyboardButton('/–û–≤–æ—á–µ–≤–∏–πü•ë')
b2 = KeyboardButton('/–§—Ä—É–∫—Ç–æ–≤–∏–πü•ë')
b3 = KeyboardButton('/–ö–æ–≤–±–∞—Å–Ω–∏–πü•ë')
b4 = KeyboardButton('/–°–æ–ª–æ–¥–∫–∏–πü•ë')
b5 = KeyboardButton('/–ì–æ—Ä—ñ—Ö–æ–≤–∏–πü•ë')
b6 = KeyboardButton('/–ï–∫–æ-—Ç–æ—Ä–±–∏–Ω–∫–∏ü•ë')
b7 = KeyboardButton('/–°—É—Ö–æ–±–∞—Ä–≤–Ω–∏–πü•ë')
#b4 = KeyboardButton('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º', request_contact=True)
#b5 = KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–¥–µ —è', request_location=True)

kb_client = ReplyKeyboardMarkup(resize_keyboard=True)

kb_client.row(b1,b2).row(b3,b4).row(b5,b6).add(b7)

@dp.message_handler(commands=['start' , 'help'])
async def command_start(message : types.Message):
	try:
		await sqlite_db.sql_read7(message)
		await bot.send_message(message.from_user.id, '–í—ñ—Ç–∞—é,—Ö–æ—á–µ—à—å –∑–∞–º–æ–≤–∏—Ç–∏ —Å–º–∞—á–Ω–∏–π –±—É–∫–µ—Ç?\n–Ø —Ñ–ª–æ—Ä–∏—Å—Ç –õ—ñ–ª—ñ–∞–Ω–∞.\n–£ —Ü—å–æ–º—É –±–æ—Ç—ñ –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å –∫–∞—Ç–∞–ª–æ–≥ –±—É–∫–µ—Ç—ñ–≤\n–î–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π –∞–±–æ –Ω–∞–ø–∏—à–∏üíå —É –¢–µ–ª–µ–≥—Ä–∞–º/–í–∞–π–±–µ—Ä –∑–∞ –Ω–æ–º–µ—Ä–æ–º +380733097990' , reply_markup=kb_client)
		await message.delete()
	except:
		await message.reply('–°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –õ–°, –Ω–∞–ø–∏—à—ñ—Ç—å –π–æ–º—É:\nhttps//t.me/masterskaya_avokado_zpBot')

@dp.message_handler(commands=['–û–≤–æ—á–µ–≤–∏–πü•ë'])
async def byket_open_command(message : types.Message):
	await sqlite_db.sql_read(message)

@dp.message_handler(commands=['–§—Ä—É–∫—Ç–æ–≤–∏–πü•ë'])
async def byket_place_command(message : types.Message):
	await sqlite_db.sql_read1(message)

@dp.message_handler(commands=['–ö–æ–≤–±–∞—Å–Ω–∏–πü•ë'])
async def byket_vait_command(message : types.Message):
	await sqlite_db.sql_read2(message)

@dp.message_handler(commands=['–°–æ–ª–æ–¥–∫–∏–πü•ë'])
async def byket_state_command(message : types.Message):
	await sqlite_db.sql_read3(message)

@dp.message_handler(commands=['–ì–æ—Ä—ñ—Ö–æ–≤–∏–πü•ë'])
async def byket_mait_command(message : types.Message):
	await sqlite_db.sql_read4(message)
	
@dp.message_handler(commands=['–ï–∫–æ-—Ç–æ—Ä–±–∏–Ω–∫–∏ü•ë'])
async def byket_save_command(message : types.Message):
	await sqlite_db.sql_read5(message)

@dp.message_handler(commands=['–°—É—Ö–æ–±–∞—Ä–≤–Ω–∏–πü•ë'])
async def byket_save_command(message : types.Message):
	await sqlite_db.sql_read6(message)


executor.start_polling(dp, skip_updates=True,on_startup=on_startup)
